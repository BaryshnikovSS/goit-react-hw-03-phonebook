{"version":3,"sources":["Components/contactForm/ContactsForm.module.css","Components/contactList/contactListItem/ContactListItem.module.css","Components/section/Section.js","Components/contactForm/ContactForm.js","Components/filter/Filter.js","Components/contactList/contactListItem/ContactListItem.js","Components/contactList/ContactList.js","Components/App.js","index.js"],"names":["module","exports","Section","title","children","style","padding","ContactForm","handleSubmit","handleChange","name","number","onSubmit","className","css","form","type","onChange","value","Filter","handleChangeFilter","width","marginBottom","ContactListItem","contactListItem","id","list","onClick","ContactList","contactList","map","el","key","uuid","v4","INITIALL_STATE","contacts","filter","App","state","componentDidMount","localContacts","localStorage","getItem","setState","JSON","parse","componentDidUpdate","_","prevState","setItem","stringify","checkForMatch","some","contact","handleFormChange","e","target","handleFormSubmit","preventDefault","newContact","alert","handleDeleteSubmit","getFilterValue","getFilteredContacts","length","toLowerCase","includes","this","filteredContacts","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5bbd5638.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactsForm_form__3-XL_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactListItem_list__1VkUv\"};","import React from 'react';\r\n\r\nconst Section = ({ title, children }) => (\r\n  <>\r\n    <h2 style={{padding: \"16px 0\"}}>{title}</h2>\r\n    {children}\r\n  </>\r\n);\r\n\r\nexport default Section;\r\n","import React from \"react\";\r\nimport css from './ContactsForm.module.css'\r\n\r\nconst ContactForm = ({ handleSubmit, handleChange, name, number }) => (\r\n  <form onSubmit={handleSubmit} className={css.form}>\r\n    <h3>Name</h3>\r\n    <input type=\"text\" name=\"name\" onChange={handleChange} value={name} />\r\n    <h3>Number</h3>\r\n    <input type=\"text\" name=\"number\" onChange={handleChange} value={number} />\r\n    <button type=\"submit\">Add contact</button>\r\n  </form>\r\n);\r\n\r\nexport default ContactForm;\r\n","import React from \"react\";\r\n\r\n// Добавь поле поиска, которое можно использовать для фильтрации списка контактов по имени.\r\n\r\n// Поле поиска это инпут без формы, значение которого записывается в состояние (контролируемый элемент).\r\n// Логика фильтрации должна быть нечувствительна к регистру.\r\n// Поле поиска ренерится только если есть 2 и более сохраненных контактов.\r\n\r\nconst Filter = ({handleChangeFilter}) => (\r\n  <>\r\n    <p>Finde contacts by name</p>\r\n    <input style={{width: \"160px\", marginBottom: \"16px\"}} type=\"text\" onChange={handleChangeFilter}/>\r\n  </>\r\n);\r\n\r\nexport default Filter;\r\n","import React from \"react\";\r\nimport css from './ContactListItem.module.css'\r\n\r\nconst ContactListItem = ({ contactListItem, handleChange }) => {\r\n  const { id, name, number } = contactListItem;\r\n  return (\r\n      <li className={css.list} >\r\n        <p>\r\n          {name}:   <span>{number}</span>\r\n        </p>\r\n        <button type=\"button\" id={id} onClick={handleChange} >delete</button>\r\n      </li>\r\n  );\r\n};\r\n\r\nexport default ContactListItem;\r\n","import React from \"react\";\r\nimport ContactListItem from \"./contactListItem/ContactListItem\";\r\nimport uuid from \"uuid\";\r\n\r\nconst ContactList = ({ contactList, handleChange }) => {\r\n  return (\r\n    <ul>\r\n      {contactList.map(el => <ContactListItem key={uuid.v4()} contactListItem={el} handleChange={handleChange}/>)}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default ContactList;\r\n","import React, { Component } from \"react\";\nimport uuid from \"uuid\";\nimport Section from \"./section/Section\";\nimport ContactForm from \"./contactForm/ContactForm\";\nimport Filter from \"./filter/Filter\";\nimport ContactList from \"./contactList/ContactList\";\n\n// Приложение должно состоять из формы и списка контактов. На текущем шаге реализуй добавление имени контакта\n// и отображение списка контактов. Приложение не должно сохранять контакты между разными сессиями (обновление страницы).\n\n// Состояние хранящееся в родительском компоненте <App> обязательно должно быть следующего вида, добавлять новые свойства нельзя.\n// Расширь функционал приложения, позволив пользователям добавлять номера телефонов. Для этого добавь второй инпут в форму,\n// и свойство для хранения его значения в состоянии.\n\n// Когда мы работаем над новым функционалом, бывает удобно жестко закодировать некоторые данные в состояние.\n// Это избавит от необходимости вручную вводить данные в интерфейсе для тестирования работы нового функционала.\n// Например можно использовать такое начальное состояние:\n\nconst INITIALL_STATE = {\n  contacts: [\n    { id: \"6b2b6280-28a2-4540-b798-c728e616b081\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n    { id: \"9eabec56-273c-497c-8785-e05d8f57949a\", name: \"Hermione Kline\", number: \"443-89-12\" },\n    { id: \"1f3f0d57-3e62-4e6f-9a18-4e97d9200717\", name: \"Eden Clements\", number: \"645-17-79\" },\n    { id: \"65b5bbb4-f3d9-4fc3-a12e-7231271b3296\", name: \"Annie Copeland\", number: \"227-91-26\" }\n  ],\n  name: \"\",\n  number: \"\",\n  filter: \"\"\n};\n\n// Возьми свое решение задания из домашней работы 2 и добавь хранение контактов телефонной книги в localStorage. \n// Используй методы жизненного цикла.\n\n// При добавлении и удалении контакта, контакты сохраняются в локальное хранилище.\n// При загрузке приложения, контакты, если таковые есть, считываются из локального хранилища и записываются в состояние.\n\nclass App extends Component {\n  state = { ...INITIALL_STATE };\n\n  componentDidMount = () => {\n    const localContacts = localStorage.getItem('contacts');\n\n    if(localContacts) {\n      this.setState({contacts: JSON.parse(localContacts)})\n    }\n  }\n\n  componentDidUpdate = ( _, prevState) => {\n    if(prevState.contacts !== this.state.contacts) {\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts))\n    }\n  }\n\n  checkForMatch = () => {\n    return this.state.contacts.some(\n      contact => contact.name === this.state.name\n    );\n  };\n\n  handleFormChange = e => {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  };\n\n  handleFormSubmit = e => {\n    e.preventDefault();\n\n    const newContact = {\n      id: uuid.v4(),\n      name: this.state.name,\n      number: this.state.number\n    };\n\n    // Запрети пользователю возможность добавлять контакты, имена которых уже есть в телефонной книге.\n    // При попытке выполнить такое действие выведи alert с предупреждением.\n\n    const isMatch = this.checkForMatch();\n\n    if (!isMatch) {\n      this.setState(prevState => ({\n        contacts: [...prevState.contacts, newContact],\n        name: \"\",\n        number: \"\"\n      }));\n    } else {\n      alert(`${this.state.name} is already in contacts.`);\n    }\n  };\n\n  handleDeleteSubmit = e =>\n  \n    // Расширь функционал приложения, позволив пользователю удалять ранее сохраненные контакты.\n\n    this.setState({\n      contacts: this.state.contacts.filter(el => el.id !== e.target.id)\n    });\n\n  getFilterValue = e => this.setState({ filter: e.target.value });\n\n  getFilteredContacts = (filter, contacts) => {\n    if (this.state.contacts.length >= 2) {\n      return contacts.filter(contact =>\n        contact.name.toLowerCase().includes(filter.toLowerCase())\n      );\n    } else {\n      return this.state.contacts;\n    }\n  };\n\n  render() {\n    const { contacts, filter } = this.state;\n    const filteredContacts = this.getFilteredContacts(filter, contacts);\n\n    return (\n      < >\n        <Section title={\"Phonebook\"} >\n          <ContactForm\n            name={this.state.name}\n            number={this.state.number}\n            handleSubmit={this.handleFormSubmit}\n            handleChange={this.handleFormChange}\n          />\n        </Section>\n        <Section title={\"Contacts\"}>\n          <Filter handleChangeFilter={this.getFilterValue} />\n          <ContactList\n            contactList={filteredContacts}\n            handleChange={this.handleDeleteSubmit}\n          />\n        </Section>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}